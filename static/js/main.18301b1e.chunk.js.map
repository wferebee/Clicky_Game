{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","pictures","App","state","friends","clickedArray","topScore","score","shuffleArray","picturesArray","i","length","j","Math","floor","random","shuffledArray","setState","includes","concat","this","map","picture","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18301b1e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" >\n        <img alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\n      </div>\n      </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.pictures}</div>;\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport PictureCard from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  state = {\n    friends,\n    clickedArray: [],\n    topScore: 0,\n    score: 0\n  };\n\n  shuffleArray = (picturesArray) => {\n    for (let i = picturesArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n    }\n    return picturesArray;\n  }\n\n  clickPicture = id => {\n    \n    const shuffledArray = this.shuffleArray(friends);\n    this.setState({friends: shuffledArray});\n    \n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [] });\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1\n      });\n    }\n\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score }); // I had trouble getting the top score to be equal to the current score on first -\n                                                     // - go around.\n    }                                                // I will fix this, I just didnt realize it until I was about to submit.\n  }\n                    // I wish I had done a lot more compartmentalization, however this is a rough working app that met the requirements.\n                    // I am going to go back and make this more component-based than it is when i have time over break.\n                    // Also I think some of the css is a little funky, in the way I did it, and the way it may render on different screens\n                    // fingers crossed\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <div className=\"logos\">\n          <div className=\"TheSimpsons\"></div>\n          <div className=\"clickyGame\"></div>\n          </div>\n        </header>\n\n        <h3 className=\"App-intro\">\n          <strong>Click on an image to earn points. Click on the same image and you lose!</strong> \n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p> \n        </h3>\n\n        <Wrapper\n          pictures=\n            {this.state.friends.map(picture => (\n              <PictureCard\n                clickPicture={this.clickPicture}\n                id={picture.id}\n                image={picture.image}\n              />\n            ))}\n        />\n\n        <div className=\"footer\">\n          <h6>Created by William Ferebee</h6>\n          <a href=\"https://github.com/wferebee/Clicky_Game\">Source Code</a>\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport register from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregister();"],"sourceRoot":""}